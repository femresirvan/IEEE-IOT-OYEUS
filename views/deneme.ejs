<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <title></title>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v2.1.1/mapbox-gl.js'></script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v2.1.1/mapbox-gl.css' rel='stylesheet' />
    <style>
      body {
        margin: 0;
        padding: 0;
      }

      #map {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100%;
      }
      .marker {
  background-image: url('mapbox-icon.png');
  background-size: cover;
  width: 50px;
  height: 50px;
  border-radius: 50%;
  cursor: pointer;
}
.mapboxgl-popup {
  max-width: 200px;
}

.mapboxgl-popup-content {
  text-align: center;
  font-family: 'Open Sans', sans-serif;
}
    </style>
</head>
<body>

<div id='map'></div>

<script>

mapboxgl.accessToken = 'pk.eyJ1IjoiYWxwZXJlbnYyIiwiYSI6ImNra3o5M2s1ZDE3b2syeW80YzJ1c3ozazEifQ.RIBYJQDgnT3T-xIbxlGVNQ';

var map = new mapboxgl.Map({
  container: 'map',
  style: 'mapbox://styles/mapbox/light-v10',
  center: [28.72668698520813,40.99040323229422 ],
  zoom: 13
});

var geojson = {
  type: 'FeatureCollection',
  features: [{
    type: 'Feature',
    geometry: {
      type: 'Point',
      coordinates: [28.92668698520813 ,40.99040323229422 ]
    },
    properties: {
      title: 'Mapbox',
      description: 'A bölgesi, Avcılar'
    }
  },
  {
    type: 'Feature',
    geometry: {
      type: 'Point',
      coordinates: [28.82668698520813,40.99040323229422 ]
    },
    properties: {
      title: 'Mapbox',
      description: 'B bölgesi, Avcılar'
    }
},
{
    type: 'Feature',
    geometry: {
      type: 'Point',
      coordinates: [28.72668698520813,40.99040323229422 ]
    },
    properties: {
      title: 'Mapbox',
      description: 'C bölgesi, Avcılar'
    }
  }]
};

// add markers to map
geojson.features.forEach(function(marker) {

// create a HTML element for each feature
var el = document.createElement('div');
el.className = 'marker';

// make a marker for each feature and add to the map
new mapboxgl.Marker(el)
  .setLngLat(marker.geometry.coordinates)
  .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups
    .setHTML('<h3>' + marker.properties.title + '</h3><p>' + marker.properties.description + '</p>'))
  .addTo(map);
});
</script>

</body>
</html>


























<!-- <!doctype html>
<html lang="en">

<head>
    <!-- Required meta tags
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <!-- <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"
        integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">

    <title>Hello, world!</title>
    <style>
        .form-group {
            float: right;
        }
    </style> --> -->
    <!-- <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  

<script src='https://api.mapbox.com/mapbox-gl-js/v2.1.1/mapbox-gl.js'></script>
<link href='https://api.mapbox.com/mapbox-gl-js/v2.1.1/mapbox-gl.css' rel='stylesheet' />

  <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.js"></script>
  <link
    rel="stylesheet"
    href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.css"
    type="text/css"
  />
  <title>Google Maps Clone</title>
  <style>
    body {
      margin: 0;
    }

    #map {
      height: 100vh;
      width: 100vw;
    }
  </style>
</head> -->

<body>

    <!-- <div id='map' style='width: 400px; height: 300px;'></div>


    <div id='map'></div>
  </body>
  <script>
    mapboxgl.accessToken = 'pk.eyJ1IjoiYWxwZXJlbnYyIiwiYSI6ImNra3o5M2s1ZDE3b2syeW80YzJ1c3ozazEifQ.RIBYJQDgnT3T-xIbxlGVNQ';
    var map = new mapboxgl.Map({
      container: 'map', -->
<!-- //       style: 'mapbox://styles/mapbox/streets-v11'
//     });
//     navigator.geolocation.getCurrentPosition(successLocation, errorLocation, {
//     enableHighAccuracy: true
//   })
  
//   function successLocation(position) {
//     setupMap([position.coords.longitude, position.coords.latitude])
//   }
  
//   function errorLocation() {
//     setupMap([-2.24, 53.48])
//   }
  
//   function setupMap(center) {
//     const map = new mapboxgl.Map({
//       container: "map",
//       style: "mapbox://styles/mapbox/streets-v11",
//       center: center,
//       zoom: 15
//     })
  
//     const nav = new mapboxgl.NavigationControl()
//     map.addControl(nav)
  
//     var directions = new MapboxDirections({
//       accessToken: mapboxgl.accessToken
//     })
  
//     map.addControl(directions, "top-left")
//   }
//   </script> --> 














    <!-- filtreleme button + input
    <div class="input-group mb-3">
        <input type="text" class="form-control" id="input-text" placeholder="Filtrele" aria-label="Recipient's username"
            aria-describedby="basic-addon2" value="">
        <div class="input-group-append">
            <button class="btn btn-outline-secondary" id="filter-button" type="button">Button</button>
        </div>
    </div>
    <!-- tablo başlangıç -->
    <!-- <div class="table-responsive-sm">
        <table class="table">
            <thead style="background-color: rgb(27, 61, 90);color:white">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Bölge</th>
                    <th scope="col">ID</th>
                    <th scope="col">Duman Yüzdesi</th>
                    <th scope="col">Pil Durumu</th>
                    <th scope="col">Tarih</th>
                </tr>
            </thead>
            <tbody id="tablogov">
            </tbody>
        </table>
        <div class="container">
            <div class="form-group col-2">
                <label for="sel1">Sayfa Sayısı</label>
                <select class="form-control" id="sel1" name="sellist1">

                </select>
                </form>
            </div>
        </div>
        <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
            integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous">
        </script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js"
            integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous">
        </script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"
            integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous">
        </script>
        <script>
            const verileriBastir = (sonuc) => {
                console.log(sonuc);
                table = document.querySelector(".table");

                let satirlarisilme = document.querySelectorAll(
                    ".satir"); //satirların hepsini alma
                for (let i = 0; i < satirlarisilme.length; i++) satirlarisilme[i]
                    .remove(); // satirlari silme
                for (let i = 0; i < sonuc.length - 1; i++) {
                    let tr = document.createElement('tr'); // satır ekleme
if(sonuc[i].flame>40){tr.className="bg-danger";tr.style.color="white"}
if(sonuc[i].voltage<=10){tr.className="bg-dark";tr.style.color="white"}
                    let th = document.createElement('th'); // numaralandırma ekleme
                    tbody = document.getElementById('tablogov');
                    tbody.appendChild(tr); //parent child ilişkisi ayarlama
                    tr.appendChild(th);
                    th.innerHTML = i + 1;
                    let td = document.createElement('td'); // satıra eleman ekleme
                    tr.appendChild(td);
                    let td1 = document.createElement('td');
                    tr.appendChild(td1);
                    let td2 = document.createElement('td');
                    tr.appendChild(td2);
                    let td3 = document.createElement('td');
                    tr.appendChild(td3);
                    let td4 = document.createElement('td');
                    tr.appendChild(td4);
                    // classlarını bir dahakinde silmek için belirliyoruz
                    th.className = "satir";
                    td.className = "satir";
                    td1.className = "satir";
                    td2.className = "satir";
                    td3.className = "satir";
                    td4.className = "satir";
                    // verileri bastırma
                    td.innerHTML = sonuc[i].sensor_id[0].toUpperCase() + ' Bölgesi';
                    td1.innerHTML = sonuc[i].sensor_id[1]+ '. Sensör';
                    td2.innerHTML = '%'+sonuc[i].flame;
                    td3.innerHTML = '%'+sonuc[i].voltage;
                    sonuc[i].date = new Date(sonuc[i].date)
                    // sonuc[i].date.setHours(sonuc[i].date.getHours()+1); duruma göre 1 saat ileri alma veya daha farklı miktarda saat değiştirme
                    td4.innerHTML = sonuc[i].date.getFullYear()+'/'+sonuc[i].date.getMonth()+'/'+sonuc[i].date.getDate()+' '+sonuc[i].date.getHours()+':'+sonuc[i].date.getMinutes()+':'+sonuc[i].date.getSeconds();
                }
            }
            const listeyiGetirme = (sonuc) => {
                //önceki listeyi silme
                const eskiListe = document.querySelectorAll('.liste');
                for (let i = 0; i < eskiListe.length; i++) {
                    eskiListe[i].remove();
                }
                //yeni listeyi bastirma
                const temp = sonuc[sonuc.length - 1];
                for (let i = 0; i < temp / 10; i++) {
                    const yeniAttribute = document.createElement('option');
                    const selPN = document.getElementById('sel1');
                    selPN.appendChild(yeniAttribute);
                    yeniAttribute.innerHTML = i;
                    yeniAttribute.id = '1';
                    yeniAttribute.className = 'liste';
                }
            }
            // router.get('/api/data/limit/:limit?/page-number/:pagenumber?/:danger?',apiController.getData);
            // router.get('/api/data/limit/:limit/field/:field/page-number/:pagenumber/:danger?',apiController.getDataByField);
            // router.get('/api/data/limit/:limit/field/:field/id/:id/page-number/:pagenumber/:danger?',apiController.getDatabyId);

            const getText = (e) => {
                let secilenListe;
                e.preventDefault();
                let x = document.getElementById("sel1");
                for (let i = 0; i < x.options.length; i++) {
                    if (x.options[i].selected == true) {
                        secilenListe = x.options[i].value;
                    }
                }
                let inputText = document.getElementById('input-text').value;
                inputText = inputText.split("@");
                console.log(inputText);
                if (inputText[0]) {
                    if (inputText[0].length == 1) {
                        if(inputText[1]){
                            fetch('http://localhost:3000/api/data/limit/10/field/'+inputText[0]+'/page-number/' + secilenListe+'/'+inputText[1])
                            .then(response => response.json())
                            .then(sonuc => {
                                listeyiGetirme(sonuc);
                                verileriBastir(sonuc)
                            })
                        }
                        else{
                            fetch('http://localhost:3000/api/data/limit/10/field/'+inputText[0]+'/page-number/' + secilenListe)
                            .then(response => response.json())
                            .then(sonuc => {
                                listeyiGetirme(sonuc);
                                verileriBastir(sonuc)
                            })
                        }
                    } else if (inputText[0].length == 2) {
                        if(inputText[1]){
                            fetch('http://localhost:3000/api/data/limit/10/field/'+inputText[0][0] +'/id/'+inputText[0][1]+'/page-number/' + secilenListe+'/'+inputText[1])
                            .then(response => response.json())
                            .then(sonuc => {
                                listeyiGetirme(sonuc);
                                verileriBastir(sonuc)
                            })
                        }
                        else{
                            fetch('http://localhost:3000/api/data/limit/10/field/'+inputText[0][0] +'/id/'+inputText[0][1]+'/page-number/' + secilenListe)
                            .then(response => response.json())
                            .then(sonuc => {
                                listeyiGetirme(sonuc);
                                verileriBastir(sonuc)
                            })
                        }
                    } else if (inputText[0] == 'yangin' || inputText[0] == 'pil' || inputText[0] == 'yangin+pil' ||inputText[0] =='pil+yangin') {
                        fetch('http://localhost:3000/api/data/limit/10/page-number/' + secilenListe + '/' +
                                inputText[0])
                            .then(response => response.json())
                            .then(sonuc => {
                                listeyiGetirme(sonuc);
                                verileriBastir(sonuc)
                            })
                    }
                } else {
                    fetch('http://localhost:3000/api/data/limit/10/page-number/' + secilenListe)
                        .then(response => response.json())
                        .then(sonuc => {
                            listeyiGetirme(sonuc);
                            verileriBastir(sonuc)
                        })
                }
            }

            const ilkAcilis = () => {
                fetch('http://localhost:3000/api/data/limit/10/page-number/0')
                    .then(response => response.json())
                    .then((sonuc) => {
                        listeyiGetirme(sonuc);
                        verileriBastir(sonuc)
                    })
            }


            ilkAcilis();

            const btnTextGetir = document.getElementById('filter-button');
            btnTextGetir.addEventListener('click', getText);
        </script> --> -->
<!-- </body>

</html> -->


<!-- if (inputText[2]) {
    if (inputText[1] == 'yangin' || inputText[1] == 'pil' || inputText[1] == 'yangin+pil' ||
        inputText[
            1] ==
        'pil+yangin') {
        // let danger = inputText[1].split("+");
        if (inputText[0][1]) {
            fetch('http://localhost:3000/api/data/limit/10/field/' + inputText[0][0] +
                    '/id/' +
                    inputText[0][1] +
                    '/page-number/' + inputText[2] + '/' + inputText[1])
                .then(response => response.json())
                .then(sonuc => {
                    listeyiGetirme(sonuc);
                    verileriBastir(sonuc)
                })
        }
    }
} else {
    if (inputText[1] == 'yangin' || inputText[1] == 'pil' || inputText[1] == 'yangin+pil' ||
        inputText[
            1] ==
        'pil+yangin') {
        // let danger = inputText[1].split("+");
        if (inputText[0][1]) {
            fetch('http://localhost:3000/api/data/limit/10/field/' + inputText[0][0] +
                    '/id/' +
                    inputText[0][1] +
                    '/page-number/0/' + secilenListe)
                .then(response => response.json())
                .then(sonuc => {
                    listeyiGetirme(sonuc);
                    verileriBastir(sonuc)
                })
        } else {
            fetch('http://localhost:3000/api/data/limit/10/field/' + inputText[0][0] +
                    '/page-number/0' +
                    inputText[1])
                .then(response => response.json())
                .then(sonuc => {
                    listeyiGetirme(sonuc);
                    verileriBastir(sonuc)
                })
        }
    } else if (inputText[1]) {
        if (inputText[0][1]) {
            fetch('http://localhost:3000/api/data/limit/10/field/' + inputText[0][0] +
                    '/id/' +
                    inputText[0][1] +
                    '/page-number/' + inputText)
                .then(response => response.json())
                .then(sonuc => {
                    listeyiGetirme(sonuc);
                    verileriBastir(sonuc)
                })
        } else {
            fetch('http://localhost:3000/api/data/limit/10/field/' + inputText[0][0] +
                    '/page-number/' + inputText)
                .then(response => response.json())
                .then(sonuc => {
                    listeyiGetirme(sonuc);
                    verileriBastir(sonuc)
                })
        }
    } else {
        if (inputText[0][1]) {
            fetch('http://localhost:3000/api/data/limit/10/field/' + inputText[0][0] +
                    '/id/' +
                    inputText[0][1] +
                    '/page-number/0/')
                .then(response => response.json())
                .then(sonuc => {
                    listeyiGetirme(sonuc);
                    verileriBastir(sonuc)
                })
        } else {
            fetch('http://localhost:3000/api/data/limit/10/field/' + inputText[0][0] +
                    '/page-number/0')
                .then(response => response.json())
                .then(sonuc => {
                    listeyiGetirme(sonuc);
                    verileriBastir(sonuc)
                })
        }
    }
} -->